[project]
authors = [{ name = "Cody Fincher", email = "cody.fincher@gmail.com" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Typing :: Typed",
]
dependencies = ["litestar>=2.0.1", "saq>=0.14.1"]
description = "Litestar integration for SAQ"
keywords = ["litestar", "saq"]
license = { text = "MIT" }
name = "litestar-saq"
readme = "README.md"
requires-python = ">=3.8"
version = "0.3.0"

[project.optional-dependencies]
hiredis = ["hiredis"]

[project.urls]
Changelog = "https://cofin.github.io/litesatr-saq/latest/changelog"
Discord = "https://discord.gg/X3FJqy8d2j"
Documentation = "https://cofin.github.io/litesatr-saq/latest/"
Homepage = "https://cofin.github.io/litesatr-saq/latest/"
Issue = "https://github.com/cofin/litestar-saq/issues/"
Source = "https://github.com/cofin/litestar-saq"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pdm]
ignore_package_warnings = [
  "alabaster",
  "sphinxcontrib-*",
  "sphinx-*",
  "sphinx",
  "pre-commit",
  "pydata-sphinx-*",
  "slotscheck",
]

[tool.pdm.dev-dependencies]
dev = ["anyio"]
docs = [
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "shibuya>=2023.9.3",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "blacken-docs>=1.16.0",
  "sphinx-design>=0.5.0",
]
linting = [
  "pre-commit>=3.4.0",
  "mypy>=1.5.1",
  "ruff>=0.0.287",
  "types-click",
  "types-redis",
  "types-croniter",
]
test = [
  "pytest>=7.4.1",
  "pytest-mock>=3.11.1",
  "httpx>=0.24.1",
  "pytest-cov",
  "coverage",
  "pytest-databases>=0.2.3",
  "pytest-sugar>=1.0.0",
  "anyio>=4.3.0",
  "litestar[jinja,redis,standard]>=2.8.2",
]

[tool.pytest.ini_options]
addopts = "-ra -q"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:xdist.*",
]
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
omit = ["tests/*"]
parallel = true

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.slotscheck]
strict-imports = false

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "RUF012",  # Ruff-specific rule - annotated with classvar
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "ARG002",  # ignore for now; investigate
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["litestar_saq", "tests"]
target-version = "py38"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C901",
  "D",
  "DTZ",
  "EM",
  "FBT",
  "G",
  "N",
  "PGH",
  "PIE",
  "PLR",
  "PLW",
  "PTH",
  "RSE",
  "S",
  "S101",
  "SIM",
  "TC",
  "TRY",
  "UP006",
  "SLF001",
  "ERA001",
]

[tool.ruff.lint.isort]
known-first-party = ["litestar_saq", "tests"]

[tool.mypy]
disallow_any_generics = false
disallow_untyped_decorators = true
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disable_error_code = "attr-defined"
disallow_untyped_decorators = false
module = "tests.*"

[tool.codespell]
ignore-words-list = "selectin"
skip = 'pdm.lock,pyproject.toml'

[tool.git-cliff.changelog]
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/cofin/litestar-saq/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/cofin/litestar-saq/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-saq/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-saq/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/cofin/litestar-saq/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | truncate(length=7, end="") }} <https://github.com/cofin/litestar-saq/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} ({{ commit.author.name  }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
Litestar SAQ Changelog
"""
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
trim = true

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
conventional_commits = true
filter_commits = false
filter_unconventional = true
ignore_tags = ""
protect_breaking_commits = false
skip_tags = "v0.1.0-beta.1"
sort_commits = "oldest"
split_commits = false
tag_pattern = "v[0-9]*"
topo_order = false
